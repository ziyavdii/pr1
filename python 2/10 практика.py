import time

class Пицца:
    def __init__(self, название, тесто, соус, начинка, цена):
        self.название = название
        self.тесто = тесто
        self.соус = соус
        self.начинка = начинка
        self.цена = цена

    def подготовить(self):
        print(f"Подготовка пиццы {self.название}")
        print(f"Тесто: {self.тесто}")
        print(f"Соус: {self.соус}")
        print(f"Начинка: {', '.join(self.начинка)}")

    def испечь(self):
        print("Выпекаем пиццу... ")
        time.sleep(1) 

    def нарезать(self):
        print("Нарезаем пиццу на кусочки... ")
        time.sleep(0.5)

    def упаковать(self):
        print("Упаковываем пиццу... ")
        time.sleep(0.5)

class ПиццаПепперони(Пицца):
    def __init__(self):
        super().__init__("Пепперони", "тонкое", "томатный", ["пепперони", "сыр моцарелла"], 350)

class ПиццаБарбекю(Пицца):
    def __init__(self):
        super().__init__("Барбекю", "тонкое", "барбекю", ["бекон", "ветчина", "зелень", "сыр моцарелла"], 450)

class ПиццаДарыМоря(Пицца):
    def __init__(self):
        super().__init__("Дары моря", "пышное", "тар-тар", ["кальмары", "креветки", "мидии", "сыр моцарелла"], 550)

class Заказ:
    def __init__(self):
        self.пиццы = []

    def добавить_пиццу(self, пицца):
        self.пиццы.append(пицца)

    def итоговая_сумма(self):
        return sum(пицца.цена for пицца in self.пиццы)

    def выполнить(self):
        print("Начинаем выполнение заказа:")
        for пицца in self.пиццы:
            пицца.подготовить()
            пицца.испечь()
            пицца.нарезать()
            пицца.упаковать()
        print("Ваш заказ готов! ")

class Терминал:
    def __init__(self):
        self.меню = {
            "1": ПиццаПепперони(),
            "2": ПиццаБарбекю(),
            "3": ПиццаДарыМоря()
        }
        self.заказ = None

    def показать_меню(self):
        print("Пиццерия #1")
        print("Добро пожаловать!")
        print("Меню:")
        for номер, пицца in self.меню.items():
            print(f"{номер}. Пицца: {пицца.название} | Цена: {пицца.цена:.2f} р.")
            print(f" Тесто: {пицца.тесто} Соус: {пицца.соус}")
            print(f" Начинка: {', '.join(пицца.начинка)}")

    def обработать_выбор(self, выбор):
        if выбор in self.меню:
            if not self.заказ:
                self.заказ = Заказ()
            self.заказ.добавить_пиццу(self.меню[выбор])
            print(f"Пицца {self.меню[выбор].название} добавлена!")
        elif выбор == "0":
            self.подтвердить_заказ()
        elif выбор == "-1":
            self.отменить_заказ()
        else:
            print("Неверный выбор. Попробуйте снова.")

    def подтвердить_заказ(self):
        if not self.заказ or not self.заказ.пиццы:
            print("Заказ пуст. Добавьте пиццу для оформления заказа.")
            return

        print("Ваш заказ:")
        for пицца in self.заказ.пиццы:
            print(f"- {пицца.название} | Цена: {пицца.цена:.2f} р.")
        print(f"Итого к оплате: {self.заказ.итоговая_сумма():.2f} р.")
        
        while True:
            try:
                сумма = float(input("Введите сумму для оплаты: "))
                if сумма >= self.заказ.итоговая_сумма():
                    сдача = сумма - self.заказ.итоговая_сумма()
                    print(f"Оплата принята. Ваша сдача: {сдача:.2f} р.")
                    self.заказ.выполнить()
                    self.заказ = None # Очистка заказа после выполнения
                    break
                else:
                    print("Недостаточно средств. Попробуйте снова.")
            except ValueError:
                print("Введите корректную сумму.")

    def отменить_заказ(self):
        if self.заказ:
            self.заказ = None
            print("Ваш заказ отменен.")
        else:
            print("У вас нет активного заказа.")

    def начать(self):
        while True:
            self.показать_меню()
            выбор = input("Выберите пиццу (1-3), подтвердите заказ (0) или отмените (-1): ")
            self.обработать_выбор(выбор)

терминал = Терминал()
терминал.начать()